#!/usr/bin/env bash
main@bashbox%10318 () 
{ 
    if test "${BASH_VERSINFO[0]}${BASH_VERSINFO[1]}" -lt 43; then
        { 
            printf 'error: %s\n' 'At least bash 4.3 is required to run this, please upgrade bash or use the correct interpreter' 1>&2;
            exit 1
        };
    fi;
    function process::self::exit () 
    { 
        local _r=$?;
        ( kill -USR1 "$___self_PID" 2> /dev/null || : ) & exit $_r
    };
    function process::self::forcekill () 
    { 
        kill -9 "$___self_PID" 2> /dev/null
    };
    function log::error () 
    { 
        local _retcode="${2:-$?}";
        local _exception_line="$1";
        local _source="${BB_ERR_SOURCE:-"${BASH_SOURCE[-1]}"}";
        if [[ ! "$_exception_line" == \(*\) ]]; then
            { 
                printf '[!!!] \033[1;31m%s\033[0m[%s]: %s\n' error "$_retcode" "${_source##*/}[${BASH_LINENO[0]}]: ${BB_ERR_MSG:-"$_exception_line"}" 1>&2;
                if test -v BB_ERR_MSG; then
                    { 
                        echo -e "STACK TRACE: (TOKEN: $_exception_line)" 1>&2;
                        local -i _frame=0;
                        local _treestack='|--';
                        local _line _caller _source;
                        while read -r _line _caller _source < <(caller "$_frame"); do
                            { 
                                printf '%s >> %s\n' "$_treestack ${_caller}" "${_source##*/}:${_line}" 1>&2;
                                _frame+=1;
                                _treestack+='--'
                            };
                        done
                    };
                fi
            };
        else
            { 
                printf '[!!!] \033[1;31m%s\033[0m[%s]: %s\n' error "$_retcode" "${_source##*/}[${BASH_LINENO[0]}]: SUBSHELL EXITED WITH NON-ZERO STATUS" 1>&2
            };
        fi;
        return "$_retcode"
    };
    \command unalias -a || exit;
    set -eEuT -o pipefail;
    shopt -sq inherit_errexit expand_aliases nullglob;
    trap 'exit' USR1;
    trap 'BB_ERR_MSG="UNCAUGHT EXCEPTION" log::error "$BASH_COMMAND" || process::self::exit' ERR;
    ___self="$0";
    ___self_PID="$$";
    ___self_DIR="$(cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd)";
    ___MAIN_FUNCNAME='main@bashbox%10318';
    ___self_NAME="Transfer organization repositories";
    ___self_CODENAME="transfer-org-repos";
    ___self_AUTHORS=("AXON <axonasif@gmail.com>");
    ___self_VERSION="1.0";
    ___self_DEPENDENCIES=(std);
    ___self_REPOSITORY="";
    ___self_BASHBOX_COMPAT="0.4.0~";
    function bashbox::build::after () 
    { 
        cp "$_target_workfile" "$_arg_path/$CODENAME";
        chmod +x "$_arg_path/$CODENAME"
    };
    function log::info () 
    { 
        echo -e "[%%%] \033[1;37minfo\033[0m: $@"
    };
    function log::warn () 
    { 
        echo -e "[***] \033[1;37mwarn\033[0m: $@"
    };
    readonly RC='\033[0m' RED='\033[0;31m' BRED='\033[1;31m' GRAY='\033[1;30m';
    readonly BLUE='\033[0;34m' BBLUE='\033[1;34m' CYAN='\033[0;34m' BCYAN='\033[1;34m';
    readonly WHITE='\033[1;37m' GREEN='\033[0;32m' BGREEN='\033[1;32m' YELLOW='\033[1;33m';
    readonly PURPLE='\033[0;35m' BPURPLE='\033[1;35m' ORANGE='\033[0;33m';
    function command::exists () 
    { 
        declare cmd="$1";
        cmd="$(command -v "$cmd")" && test -x "$cmd"
    };
    function dw () 
    { 
        declare -a dw_cmd;
        if command::exists curl; then
            { 
                dw_cmd=(curl -sSL)
            };
        else
            if command::exists wget; then
                { 
                    dw_cmd=(wget -qO-)
                };
            fi;
        fi;
        if test -n "${dw_cmd:-}"; then
            { 
                declare dw_path="$1";
                declare dw_url="$2";
                declare cmd="$(
			cat <<EOF
mkdir -m 0755 -p "${dw_path%/*}" && until ${dw_cmd[*]} "$dw_url" ${PIPE:-"> '$dw_path'"}; do continue; done
if test -e "$dw_path"; then chmod +x "$dw_path"; fi
EOF
		)";
                sudo sh -c "$cmd"
            };
        else
            { 
                log::error "curl or wget wasn't found, some things will go wrong" 1 || exit
            };
        fi
    };
    function get_input () 
    { 
        declare name="$1";
        declare placeholder="$2";
        declare input && input="$(gum input --placeholder "$placeholder")";
        if test -z "${input:-}"; then
            { 
                log::error "You provided empty input for $name" 1 || exit
            };
        fi;
        printf '%s\n' "$input"
    };
    function main () 
    { 
        declare source_org target_org total_repo_list filter_repos;
        declare extra_gitpod_msg="Maybe you need to readjust scopes on https://gitpod.io/variables
Also make sure Gitpod is allowed on third-party access on your ORG(s)";
        if ! command::exists gh; then
            { 
                log::info "Installing gh CLI";
                PIPE="| tar --strip-components=1 -C /usr -xpz" dw "/usr/bin/gh" "https://github.com/cli/cli/releases/download/v2.20.0/gh_2.20.0_linux_amd64.tar.gz"
            };
        fi;
        if ! command::exists fzf; then
            { 
                log::info "Installing fzf CLI";
                PIPE="| tar -C /usr/bin -xpz fzf" dw "/usr/bin/fzf" "https://github.com/junegunn/fzf/releases/download/0.35.0/fzf-0.35.0-linux_amd64.tar.gz"
            };
        fi;
        if ! command::exists gum; then
            { 
                log::info "Installing gum CLI";
                PIPE="| tar -C /usr/bin -xpz gum" dw "/usr/bin/gh" "https://github.com/charmbracelet/gum/releases/download/v0.8.0/gum_0.8.0_linux_x86_64.tar.gz"
            };
        fi;
        declare repo="$(git -C "${GITPOD_REPO_ROOT:-.}" config --get remote.origin.url)";
        declare default_repo="https://github.com/gitpod-samples/tool-transfer-org-repos";
        : "${repo:="$default_repo"}";
        printf "${ORANGE}\$${RC} %s\n" "$___self_NAME - v${___self_VERSION}" "With this tool you can interactively filter out and choose repos to transfer" "Please ensure that all the prerequisites are met: $(echo -e "${ORANGE}${repo}#prerequisites${RC}")";
        read -n 1 -r -p "$(echo -e ">> Press ${BGREEN}Enter${RC} to continue...")";
        if ! gh auth status > /dev/null 2>&1; then
            { 
                log::info "Trying to login into gh CLI";
                declare token;
                token="$(printf '%s\n' host=github.com | gp credential-helper get | awk -F'password=' '{print $2}')" || { 
                    log::error "Failed to retrieve Github auth token from 'gp credential-helper'" || exit
                };
                printf '%s\n' "$token" | gh auth login --with-token || { 
                    log::error "Failed to login to Github via gh CLI. $extra_gitpod_msg" || exit
                }
            };
        fi;
        source_org="$(get_input "source_org" "Enter the source org name to move repos from (e.g. gitpod-io)")";
        target_org="$(get_input "target_org" "Enter the target org name (e.g. gitpod-samples)")";
        log::info "Checking if you got admin permissions on $source_org";
        declare query && query="$(
    gh api graphql -F login="${source_org}" -f query='
      query ($login: String!) {
        organization(login: $login) {
          viewerCanAdminister
        }
      }
    ' --jq '.data.organization.viewerCanAdminister'
  )";
        if test "$query" != true; then
            { 
                log::error "You do not have, $extra_gitpod_msg" 1 || exit
            };
        fi;
        log::info "Checking if you got repository creation permissions on $target_org";
        declare query && query="$(
    gh api graphql -F login="${target_org}" -f query='
      query ($login: String!) {
        organization(login: $login) {
          viewerCanCreateRepositories
        }
      }
    ' --jq '.data.organization.viewerCanCreateRepositories'
  )";
        if test "$query" != true; then
            { 
                log::error "You do not have, $extra_gitpod_msg" 1 || exit
            };
        fi;
        log::info "Retrieving repository list from $source_org";
        total_repo_list=($(gh api graphql --paginate -F login="${source_org}" -f query='
      query($endCursor: String, $login: String!) {
      organization(login: $login) {
          repositories(first: 100, after: $endCursor) {
            pageInfo { hasNextPage endCursor }
            nodes { name }
          }
        }
      }' --jq '.[].organization.repositories.nodes[].name'
    ));
        filter_repos=($(
    filter="$(
      printf '%s\n' "${total_repo_list[@]}" |         fzf --ansi --print-query           --prompt "[1/2] Provide a filter keyword, then press $(echo -e "${BGREEN}Enter${RC}") > " | head -n1
    )";

    if test -z "$filter"; then {
      log::error "You did not provide a filter key" 1 || exit;
    } fi

    filter=($(printf '%s\n' "${total_repo_list[@]}" | fzf --filter "$filter")) || {
      log::error "Your filter didn't match anything!" || exit;
    };


    log::info "[2/2] You can press ${BRED}Space${RC} to unselect, proceed by pressing ${BGREEN}Enter${RC}" >&2;
    filter_string="${filter[*]}";
    printf '%s\n' "${filter[@]}" |       GUM_CHOOSE_SELECTED="${filter_string// /,}" gum choose --no-limit --height 20;

  )) || exit;
        declare keyPress filter_string;
        filter_string="$(echo -e "${YELLOW}${filter_repos[*]}${RC}")";
        read -r -n 1 -p "$(echo -e ">> Press ${BGREEN}Enter${RC} to start the transfer of selected repos: ${filter_string// /, }")" keyPress;
        printf '\n';
        log::info ">> Confirm once again by typing ${BRED}transfer${RC}";
        keyPress="$(gum input --placeholder 'Type ...')";
        if test "${keyPress:-}" != "transfer"; then
            { 
                log::error 'You did not type ${BRED}transfer${BRED}, quitting' 1 || exit
            };
        fi;
        declare repo;
        for repo in "${filter_repos[@]}";
        do
            { 
                log::info "Issuing transfer of ${source_org}/${repo} to $target_org \c";
                printf '{"new_owner":"%s"}' "$target_org" | gh api -X POST "repos/${source_org}/${repo}/transfer" --input - > /dev/null || { 
                    log::error "Failed to move $repo, ensure you have correct permissions" || exit
                };
                echo -e "${BGREEN}[OK]${RC}"
            };
        done
    };
    main "$@";
    wait;
    exit
}
main@bashbox%10318 "$@";
